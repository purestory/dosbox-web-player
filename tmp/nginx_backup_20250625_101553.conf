# Referer 기반 backend 선택 (tribler만 해당)
map $http_referer $api_backend {
    "~*tribler"           "http://localhost:8085";
}

# Referer 기반 tribler 검사
map $http_referer $is_tribler {
    default                "0";
    "~*tribler"           "1";
}

# HTTP 서버 - HTTPS로 리다이렉트
server {
    listen 80;
    server_name ai-open.kr www.ai-open.kr;
    return 301 https://$server_name$request_uri;
}

# HTTPS 서버
server {
    listen 443 ssl http2;
    server_name ai-open.kr www.ai-open.kr;
    
    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/ai-open.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ai-open.kr/privkey.pem;
    
    # SSL 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # 큰 파일 업로드 지원
    client_max_body_size 50G;
    proxy_buffering off;
    proxy_connect_timeout 3600s;
    proxy_send_timeout 3600s;
    proxy_read_timeout 3600s;
    

    

    
    
    # 메인 페이지 설정 (React)
    location = / {
        root /home/purestory/main-website/frontend/dist;
        try_files /index.html =404;
        
        # 캐시 설정
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # React 정적 파일 (assets)
    location ~ ^/assets/ {
        root /home/purestory/main-website/frontend/dist;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # React 정적 파일 (루트 레벨)
    location ~* ^/[^/]+\.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
        root /home/purestory/main-website/frontend/dist;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # 기존 바닐라 JS 정적 파일 (하위 호환성)
    location ~ ^/(css|js|images)/ {
        root /home/purestory/main-website;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # Whisper Service 설정
    location = /whisper {
        return 301 /whisper/;
    }
    
    location ^~ /whisper/ {
        alias /home/purestory/whisper/vite-frontend/dist/;
        index index.html;
        try_files $uri $uri/ /whisper/index.html;
        
        # 캐시 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Whisper API 프록시
    location ^~ /whisper-api/ {
        rewrite ^/whisper-api/(.*)$ /$1 break;
        proxy_pass http://localhost:3401;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
    }
    
    # Translation Service 설정
    location = /translation {
        return 301 /translation/;
    }
    
    location ^~ /translation/ {
        alias /home/purestory/translation-service/vite-frontend/dist/;
        index index.html;
        try_files $uri $uri/ /translation/index.html;
        
        # 캐시 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
        # Translation API 프록시
    location ^~ /translation-api/ {
        rewrite ^/translation-api/(.*)$ /api/$1 break;
        proxy_pass http://localhost:3501;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
    }

    # EdgeTTS Service 설정
    location = /edgetts {
        return 301 /edgetts/;
    }
    
    location ^~ /edgetts/ {
        alias /home/purestory/edgetts/frontend/dist/;
        index index.html;
        try_files $uri $uri/ /edgetts/index.html;
        
        # 캐시 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Kokoro TTS Service 설정
    location = /kokoro {
        return 301 /kokoro/;
    }
    
    location ^~ /kokoro/ {
        rewrite ^/kokoro/(.*)$ /$1 break;
        proxy_pass http://localhost:3200;
        
        # 캐시 완전 무효화
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # 압축 해제하여 sub_filter 작동하게 함
        proxy_set_header Accept-Encoding "";
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # Kokoro API 경로 수정 (JavaScript 내의 절대 경로를 상대 경로로 변환)
        # 기본 API 경로 변환
        sub_filter '"/v1/' '"/kokoro/v1/';
        sub_filter "'/v1/" "'/kokoro/v1/";
        sub_filter 'fetch("/v1/' 'fetch("/kokoro/v1/';
        sub_filter 'url: "/v1/' 'url: "/kokoro/v1/';
        sub_filter 'baseURL: "/v1' 'baseURL: "/kokoro/v1';
        sub_filter 'endpoint: "/v1' 'endpoint: "/kokoro/v1';
        
        # 템플릿 리터럴과 동적 URL 생성 패턴 (kokoro에서 발견된 실제 패턴)
        sub_filter '`/v1' '`/kokoro/v1';
        sub_filter '= `/v1' '= `/kokoro/v1';
        sub_filter 'Path = `/v1' 'Path = `/kokoro/v1';
        sub_filter 'serverDownloadPath = `/v1' 'serverDownloadPath = `/kokoro/v1';
        
        # 다운로드 링크 경로 수정 (더 포괄적인 패턴) 
        sub_filter 'href="/v1/download/' 'href="/kokoro/v1/download/';
        sub_filter 'window.open("/v1/download/' 'window.open("/kokoro/v1/download/';
        sub_filter 'location.href = "/v1/download/' 'location.href = "/kokoro/v1/download/';
        sub_filter 'download("/v1/' 'download("/kokoro/v1/';
        
        # URL 객체 및 문자열 연결 패턴
        sub_filter '+ "/v1/' '+ "/kokoro/v1/';
        sub_filter 'url = "/v1/' 'url = "/kokoro/v1/';
        sub_filter 'path = "/v1/' 'path = "/kokoro/v1/';
        
        # AJAX 및 XMLHttpRequest 패턴
        sub_filter 'open("GET", "/v1/' 'open("GET", "/kokoro/v1/';
        sub_filter 'open("POST", "/v1/' 'open("POST", "/kokoro/v1/';
        
        sub_filter_once off;
        sub_filter_types text/html text/css text/javascript application/javascript;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # CORS 헤더 추가
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }





    # EdgeTTS API 프록시
    location ^~ /edge-api/ {
        rewrite ^/edge-api/(.*)$ /$1 break;
        proxy_pass http://localhost:3701;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
    }

    # EdgeTTS 직접 접근 (3701 포트)
    location ~ ^/voices(?:/.*)?$ {
        proxy_pass http://localhost:3701;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # CORS 헤더 추가
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    location /synthesize {
        proxy_pass http://localhost:3701;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # CORS 헤더 추가
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # Main Website API 프록시 (지뢰찾기 등)
    location ^~ /main-api/ {
        proxy_pass http://localhost:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
    }

    # Tribler API 프록시
    location ^~ /tribler-api/ {
        rewrite ^/tribler-api/(.*)$ /api/$1 break;
        proxy_pass http://localhost:8085;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # WebSocket support for SSE
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Tribler API (우선순위 높음)
    location ^~ /tribler/api/ {
        # 트레일링 슬래시 제거
        rewrite ^/tribler/api/(.*)/$  /tribler/api/$1 redirect;
        rewrite ^/tribler/api/(.*)$ /api/$1 break;
        proxy_pass http://localhost:8085;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Tribler locales
    location ^~ /tribler/locales/ {
        rewrite ^/tribler/locales/(.*)$ /locales/$1 break;
        proxy_pass http://localhost:8085;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Tribler UI locales
    location ^~ /tribler/ui/locales/ {
        rewrite ^/tribler/ui/locales/(.*)$ /ui/locales/$1 break;
        proxy_pass http://localhost:8085;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 직접 API 접속 차단 (tribler에서 오면 리다이렉트)
    location /api/ {
        if ($is_tribler = "1") {
            return 301 /tribler$request_uri;
        }
        return 404;
    }

    # 직접 locales 접속 차단 (tribler에서 오면 리다이렉트)
    location /locales/ {
        if ($is_tribler = "1") {
            return 301 /tribler$request_uri;
        }
        return 404;
    }

    # 직접 ui/locales 접속 차단 (tribler에서 오면 리다이렉트)
    location /ui/locales/ {
        if ($is_tribler = "1") {
            return 301 /tribler$request_uri;
        }
        return 404;
    }

    # Tribler 웹 UI
    location ^~ /tribler/ {
        rewrite ^/tribler/(.*)$ /$1 break;
        proxy_pass http://localhost:8085/;
        proxy_redirect / /tribler/;
        
        # 캐시 완전 무효화
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # 압축 해제하여 sub_filter 작동하게 함
        proxy_set_header Accept-Encoding "";
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # JavaScript 경로 수정 (더 포괄적)
        sub_filter '"/api/' '"/tribler/api/';
        sub_filter "'/api/" "'/tribler/api/";
        sub_filter '"/locales/' '"/tribler/locales/';
        sub_filter "'/locales/" "'/tribler/locales/";
        sub_filter '"/ui/locales/' '"/tribler/ui/locales/';
        sub_filter "'/ui/locales/" "'/tribler/ui/locales/";
        sub_filter '"/ui/' '"/tribler/ui/';
        sub_filter "'/ui/" "'/tribler/ui/";
        sub_filter '"/events/' '"/tribler/api/events/';
        sub_filter "'/events/" "'/tribler/api/events/";
        sub_filter_once off;
        sub_filter_types *;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    location = /tribler {
        return 301 /tribler/;
    }
    
    # explorer 설정
    location = /explorer {
        rewrite ^ /explorer/ permanent;
    }
    
    # explorer 정적 파일 우선 처리 (정규표현식 location이 일반 location보다 우선순위 높음)
    location ~ ^/explorer/.*\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        root /home/purestory/explorer/frontend/;
        rewrite ^/explorer/(.*)$ /$1 break;
        expires 1d;
        add_header Cache-Control "public";
        try_files $uri =404;
    }
    
    # explorer/main 접근 제어 - 세션 체크를 위해 백엔드로 라우팅
    location = /explorer/main {
        proxy_pass http://localhost:3301/main;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        
        # 세션 쿠키 전달
        proxy_set_header Cookie $http_cookie;
        proxy_pass_header Set-Cookie;
    }
    
    # explorer/logout 라우팅
    location = /explorer/logout {
        proxy_pass http://localhost:3301/logout;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        
        # 세션 쿠키 전달
        proxy_set_header Cookie $http_cookie;
        proxy_pass_header Set-Cookie;
    }
    
    location /explorer/ {
        alias /home/purestory/explorer/frontend/;
        index index.html;
        try_files $uri $uri.html $uri/ /explorer/index.html;
    }
    
    # explorer API 설정
    location /explorer-api/ {
        proxy_pass http://localhost:3301/explorer-api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # 세션 쿠키 전달
        proxy_set_header Cookie $http_cookie;
        proxy_pass_header Set-Cookie;
    }
    
    # Cobalt API 설정 (우선순위 높음 - 웹 UI보다 먼저)
    location ^~ /cobalt-api/ {
        rewrite ^/cobalt-api/(.*)$ /$1 break;
        proxy_pass http://localhost:3601;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Cobalt 웹 UI 설정 (Vite React)
    location = /cobalt {
        return 301 /cobalt/;
    }
    
    location ^~ /cobalt/ {
        alias /home/purestory/cobalt/vite-frontend/dist/;
        index index.html;
        try_files $uri $uri/ /cobalt/index.html;
        
        # 정적 파일 캐싱 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Amica React 정적 파일 서빙
    location = /amica {
        return 301 /amica/;
    }

    # Amica API 프록시 (Backend 포트 3101로 변경 예정)
    location ^~ /amica/api/ {
        rewrite ^/amica/api/(.*)$ /$1 break;
        proxy_pass http://localhost:3101;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API는 캐시하지 않음
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        proxy_buffering off;
        client_max_body_size 50G;
    }

    # Amica 정적 파일 서빙 (React 빌드 결과물)
    location ^~ /amica/ {
        alias /home/purestory/amica/frontend/dist/;
        index index.html;
        try_files $uri $uri/ /amica/index.html;
        
        # 정적 파일 캐싱 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|vrm)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # HTML 파일은 캐시하지 않음
        location ~* \.html$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }

    # Zonos 웹 UI
    location = /zonos {
        return 301 /zonos/;
    }

    location ^~ /zonos/ {
        proxy_pass http://localhost:7860/;
        
        # 캐시 완전 무효화
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

        # WebTools 웹 UI
    location = /webtools {
        return 301 /webtools/;
    }
    
    location ^~ /webtools/ {
        alias /home/purestory/webtools/frontend/dist/;
        index index.html;
        try_files $uri $uri/ /webtools/index.html;
        
        # 캐시 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # WebTools API 프록시
    location ^~ /webtools-api/ {
        rewrite ^/webtools-api/(.*)$ /$1 break;
        proxy_pass http://localhost:3801;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 클라이언트 실제 IP 전달 개선
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Remote-Addr $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        
        proxy_buffering off;
        client_max_body_size 100M;
    }

    # DOSBox 웹 UI (em-dosbox 바닐라 자바스크립트) - 기존 버전
    location = /dosbox {
        return 301 /dosbox/;
    }
    
    location ^~ /dosbox/ {
        alias /home/purestory/dosbox/frontend/;
        index index.html;
        try_files $uri $uri/ /dosbox/index.html;
        
        # CORS 헤더 (js-dos CDN 로드용)
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        
        # 캐시 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # WASM 파일 처리 (명시적 MIME 타입 설정)
        location ~* \.(wasm)$ {
            add_header Content-Type "application/wasm" always;
            add_header Cross-Origin-Embedder-Policy "require-corp" always;
            add_header Cross-Origin-Opener-Policy "same-origin" always;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # HTML 파일은 캐시하지 않음
        location ~* \.html$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }

    # DOSBox Auto - js-dos 기반 완전 자동 실행 버전
    location = /dosbox-auto {
        return 301 /dosbox-auto/;
    }
    
    location ^~ /dosbox-auto/ {
        alias /home/purestory/dosbox/frontend-auto/;
        index index.html;
        try_files $uri $uri/ /dosbox-auto/index.html;
        
        # CORS 헤더 (js-dos CDN 로드용)
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        
        # js-dos 라이브러리 지원을 위한 추가 헤더
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 캐시 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # WASM 파일 처리 (js-dos WebAssembly 지원)
        location ~* \.(wasm)$ {
            add_header Content-Type "application/wasm" always;
            add_header Cross-Origin-Embedder-Policy "require-corp" always;
            add_header Cross-Origin-Opener-Policy "same-origin" always;
            add_header Cross-Origin-Resource-Policy "cross-origin" always;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # HTML 파일은 캐시하지 않음
        location ~* \.html$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        # OPTIONS 요청 처리 (js-dos CORS preflight)
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # DOSBox games 정적 파일 서빙
    location ^~ /games/ {
        alias /home/purestory/dosbox/frontend/public/games/;
        
        # ZIP 파일 및 게임 리소스 처리
        location ~* \.(zip|exe|com|bat|img|ima|fdd|dsk)$ {
            add_header Content-Type application/octet-stream;
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type" always;
            expires 1d;
            add_header Cache-Control "public";
        }
        
        # OPTIONS 요청 처리 (CORS preflight)
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # 파비콘 처리 - Zonos에서 가져오기
    location = /favicon.ico {
        proxy_pass http://localhost:7860/favicon.ico;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }

    # robots.txt 처리 - Zonos에서 가져오기
    location = /robots.txt {
        proxy_pass http://localhost:7860/robots.txt;
        proxy_set_header Host $host;
        expires 1d;
    }

    # manifest.json, sitemap.xml 등 기타 root 파일들
    location ~* ^/(manifest\.json|sitemap\.xml|browserconfig\.xml)$ {
        proxy_pass http://localhost:7860$request_uri;
        proxy_set_header Host $host;
        expires 1d;
    }
    
    # 기본 에러 페이지
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# OpenWebUI 서브도메인 설정
server {
    listen 80;
    listen [::]:80;
    server_name openwebui.ai-open.kr;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name openwebui.ai-open.kr;

    # SSL 인증서 설정 (기존 와일드카드 인증서 사용)
    ssl_certificate /etc/letsencrypt/live/ai-open.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ai-open.kr/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # 보안 헤더
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # OpenWebUI 프록시 설정
    location / {
        proxy_pass http://localhost:3000;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # CORS 헤더 추가
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}

# N8N 서브도메인 설정
server {
    listen 80;
    listen [::]:80;
    server_name n8n.ai-open.kr;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name n8n.ai-open.kr;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/ai-open.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ai-open.kr/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # 보안 헤더 (X-Frame-Options는 location에서 처리)
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'; frame-ancestors 'self' https://ai-open.kr" always;

    # N8N 프록시 설정
    location / {
        proxy_pass http://localhost:3900;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        client_max_body_size 50G;
        
        # WebSocket support (N8N은 웹소켓을 많이 사용)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # N8N 특화 헤더 설정
        proxy_set_header X-Forwarded-Ssl on;
        proxy_set_header X-Forwarded-Port 443;
        
        # N8N의 X-Frame-Options 헤더 제거 및 iframe 허용 헤더 추가
        proxy_hide_header X-Frame-Options;
        add_header X-Frame-Options "ALLOWALL" always;
        
        # CORS 헤더 추가
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}
